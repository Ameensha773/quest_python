List Slicing:

numbers = [2, 9, 7, 5, 3, 13, 19, 17, 29]
print(numbers) # we get the complete list
print(numbers[0]) # we get the 1st element
print(numbers[-1]) # we get the last element
Hence, we see that -ve indexing is possible in Python
print(numbers[-2]) # we get last but element from the list
print(numbers[:]) # we get the complete list
Here, we have written nothing before the colon and hence it is treated as 0, which means start from the beginning of the list. Here also have not written anything after the colon, which means it is treated as UP TO END OF THE LIST. 
print(numbers[:3]) # Start from index 0 and access elements up to index 3-1 which is 2.
print(numbers[1:-1]) # Start from index 1 (2nd element) and access elements up to last but element, because -1 is the index of last element and we must not include it.
print(numbers[1:8:2]) # start from index 1 and access upto index 8-1 and increment each time by 2 elements. So o/p is [9, 5, 3, 19]
print(numbers[::3]) # start from biginning and go up to end of the list with increment of 3
print(numbers[8:1:-2]) Start from index 8, go up to index 2 with decrement of 2 (or increment of -2)
print(numbers[::-1]) # Since the increment is negative, we understand that we have to move in reverse (meaning from the end to towards the start). The area within the list we have to access is all the elements, because nothing is specified before and after the 1st colon :

numbers = [1, 2, 3]
print(numbers[:1:-2])
The above statement will be treated as: print(numbers[-1:1:-2])
So, start from last possible index, go upto index 1, with decrement of 2

When ever we mention the increment as -ve and also, we have not mentioned where to start from, then Python always considers the start as the last element.
And hence we get the answer here as [3]

########################################################
#List methods

1 list.append(x)
Add an item to the end of the list. 
Equivalent to a[len(a):] = [x].

2 list.split() splits the list  based on a seperator  it returns a list 

3 list.extend(iterable)
Extend the list by appending all the items from the iterable. 
Equivalent to a[len(a):] = iterable.

4 list.insert(i, x)
Insert an item at a given position. The first argument is the index of the element before which to insert, 
so a.insert(0, x) inserts at the front of the list, and a.insert(len(a), x) is equivalent to a.append(x).

5 list.remove(x)
Remove the first item from the list whose value is equal to x. It raises a ValueError if there is no such item.

6 list.pop([i])
Remove the item at the given position in the list, and return it. If no index is specified, 
a.pop() removes and returns the last item in the list. 
It raises an IndexError if the list is empty or the index is outside the list range.

7 list.clear()
Remove all items from the list. Equivalent to del a[:].

8 list.index(x[, start[, end]])
Return zero-based index in the list of the first item whose value is equal to x. Raises a ValueError if there is no such item.
The optional arguments start and end are interpreted as in the slice notation and are used to limit 
the search to a particular subsequence of the list. 
The returned index is computed relative to the beginning of the full sequence rather than the start argument.

9 list.count(x)
Return the number of times x appears in the list.

10 list.sort(*, key=None, reverse=False)
Sort the items of the list in place (the arguments can be used for sort customization, see sorted() for their explanation).
key :function we can mention how to sort the list
11 list.reverse()
Reverse the elements of the list in place.

12 list.copy()
Return a shallow copy of the list. Equivalent to a[:].

#################################################################################################
#Global methods and keywords:
numbers = [1, 2, 3, 4, 5]
del numbers[1:3]
print(numbers) # [1, 4, 5]
del numbers[1]
print(numbers) # [1, 5]
del numbers[:] # we are deleting all the elements from the list
print(numbers) # []
numbers.insert(10, 0) # inserting the element 10 at index 0
 
#INSERT ELEMENT AT REAR OF THE LIST: 3 different ways
a.insert(len(a), x)
a.append(x)
a.[len(a):] = [element]
 
Below is an error
numbers[len(numbers):] = 3
TypeError because we must assign only a list(itarable) not a primitive value

#predefined  function on list
1 max() returns max value in list
2 min() returns min value in list
3 len() returns no of elements in list
4 sorted() returns a duplicate sorted list but donot modify the original list 

##################################################################################################

we can use relation operators on list object
l1 = [3,6,9]
l2 =[1,2,4,12]
if l1 < l2:
print('List1 is bigger')
else:
print('list2 is bigger')

#############################################################################################
strings in python

1 string.upper() converts strings to upper case
2 sring.captlize() convert the first letter in string to capital
3 string.center(charactore) center the sting by adding elements and front and back of string if () is empty
it adds spaces and front and back of string to make it center
4 string.count() returns the number of specified charactor in string
5 string.find() return the first specified element in the string
6 index()	Searches the string for a specified value and returns the position of where it was found
7 isalnum()	Returns True if all characters in the string are alphanumeric
8 isalpha()	Returns True if all characters in the string are in the alphabet
9 isascii()	Returns True if all characters in the string are ascii characters
10 isdecimal()	Returns True if all characters in the string are decimals
11 isdigit()	Returns True if all characters in the string are digits
12 isnumeric()	Returns True if all characters in the string are numeric
13 islower()	Returns True if all characters in the string are lower case
14 isidentifier()	Returns True if the string is an identifier
15 isprintable()	Returns True if all characters in the string are printable
16 isspace()	Returns True if all characters in the string are whitespaces
17 istitle()	Returns True if the string follows the rules of a title
18 isupper()	Returns True if all characters in the string are upper case
19 join()	Converts the elements of an iterable into a string
20 ljust()	Returns a left justified version of the string
21 lower()	Converts a string into lower case
22 replace()	Returns a string where a specified value is replaced with a specified value
23 endswith() retrun true if a string ends with a particular charactor



########################################
Ds is python

list : ordered and muatable(we can change the elements)
    eg:list1 = []
    list1 = list()
tuple :ordered and unmutable(we cannot change the elements)
    eg:tuple1 = ()
    tuple2 = tuple()
dictionary : ordered and mutable stored as key value pairs
    eg:dictionary1 = { }
    dictionary2 = dict()
set: unordered(means we cannot acces items indivually) and unmutable elements cannot be repeated 
    set1 = set()
    set1 = {}

##############################################################################
Variable no of arguments in function '*arg'
It is this concept or tool of Python using which the Function overloading concept is implemented alternatively. Thus, there is no need to Overload funcstions/methods in Python.

def varArgFunction1(*arguments):
    print(arguments)
    print(type(arguments)) # tuple the variable number of args return tuple

varArgFunction1(1, 2, 4)
varArgFunction1()
varArgFunction1('list', 'tuple', 'set', 'dictionary')


##pass by reference 

def varArgFunction(*arguments): # receives the data into a tuple. However, if it has objects like list or dictionary, then they will received by reference only.
    print(arguments)
    arguments[0].remove(10)

numbers1 = [int(num) for num in input().split(',')]
# input: 10,20,30,40,50
print(numbers1)
varArgFunction(numbers1)# # only the reference to the list is passed the actual list is not passed and actual list not modified
print(numbers1)